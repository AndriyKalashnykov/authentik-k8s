package main

import (
	"context"
	"log"

	"github.com/AndriyKalashnykov/authentik-k8s/gotest/internal/authentik"
	api "goauthentik.io/api/v3"
)

const (
	AuthentikServerScheme      = "https"
	AuthentikServerHost        = "127.0.0.1:9443"                                               //"172.18.255.200:443"
	AuthentikBootstrapToken    = "NoMlxBQuYgfu3j19ygGqhjXenAjrJgOfN5naqmSDBUhdLjYqHKze7yyzY07H" // see AUTHENTIK_BOOTSTRAP_TOKEN in K8s manifests
	Orgs                       = "orgs/"
	Org1                       = "org-01"
	Org2                       = "org-02"
	GroupOrg1Admins            = Org1 + "-admins"
	GroupOrg1AdminsIsSuperUser = true // can login to Authentic admin Web UI interface
	GroupOrg1Admin             = Org1 + "-admin"
	GroupOrg1AdminPwd          = "Authentik01234567890!"
	GroupOrg1AdminToken        = "ZId4CDEtmHbnuxkJH2ehUzHgYeTmOansuCO0JsTTsZnYB1z9N0WoAutpyH4i"

	GroupOrg1AdminIdentifier  = GroupOrg1Admin + "-token"
	GroupOrg1AdminDescription = "qleetctl-token created with authentik/go-client"
)

func main() {
	ctx := context.Background()

	// create authentic API client using AuthentikBootstrapToken used during Authentik deployment

	akadminConfig := authentik.CreateConfiguration(AuthentikServerScheme, AuthentikServerHost, AuthentikBootstrapToken)
	akadminApiClient := api.NewAPIClient(akadminConfig)

	// create a group
	// will create new group with different pk
	grp, _, err := authentik.CreateGroup(ctx, akadminApiClient, GroupOrg1Admins, GroupOrg1AdminsIsSuperUser)
	if err != nil {
		log.Panicf("error: %v", err)
	}
	groupUID := grp.Pk
	log.Printf("groupUID: %v\n", groupUID)

	// create a user and assign it to previously created group
	usr, _, err := authentik.CreateUser(ctx, akadminApiClient, groupUID, GroupOrg1Admin, Orgs+Org1)
	if err != nil {
		log.Panicf("error: %v", err)
	}
	userUID := usr.Pk
	log.Printf("userUID: %v\n", userUID)

	// create user's password
	resp, err := authentik.UpdateUserPassword(ctx, akadminApiClient, userUID, GroupOrg1AdminPwd)
	if err != nil {
		log.Panicf("error: %v", err)
	}
	if resp != nil {

	}

	// create user's OAuth token
	token, resp, err := authentik.CreateUserToken(ctx, akadminApiClient, userUID, GroupOrg1AdminIdentifier, GroupOrg1AdminDescription)
	if err != nil {
		log.Panicf("error: %v", err)
	}
	if token != nil {
		log.Printf("Token: %v", token)
	}

	// retrieve user's OAuth token generated by Authentik
	tv, _, err := authentik.RetrieveUserToken(ctx, akadminApiClient, GroupOrg1AdminIdentifier)
	if err != nil {
		log.Panicf("error: %v", err)
	}
	if tv != nil {
		log.Printf("OAuth token: %v", tv.Key)
	}

	// update user's OAuth token with custom key value
	resp, err = authentik.UpdateUserToken(ctx, akadminApiClient, GroupOrg1AdminIdentifier, GroupOrg1AdminToken)
	if err != nil {
		log.Printf("error: %v", err)
	}
	if tv != nil {
		log.Printf("resp: %v", resp.Body)
	}

	// retrieve user's OAuth token with custom key value
	tvnew, _, err := authentik.RetrieveUserToken(ctx, akadminApiClient, GroupOrg1AdminIdentifier)
	if err != nil {
		log.Panicf("error: %v", err)
	}
	if tv != nil {
		log.Printf("OAuth token: %v", tvnew.Key)
	}

	// check if Oauth token was set
	if tvnew.Key == GroupOrg1AdminToken {
		log.Printf("GroupOrg1AdminToken was set ")
	} else {
		log.Printf("Something went wrong: setting GroupOrg1AdminToken")
	}

	// create authentic API client using user's Oauth token from previous step
	qleetctlConfig := authentik.CreateConfiguration(AuthentikServerScheme, AuthentikServerHost, tvnew.Key)
	qleetctlApiClient := api.NewAPIClient(qleetctlConfig)

	// get user's info
	su, _, err := authentik.MeRetrieveUser(ctx, qleetctlApiClient)
	if err != nil {
		log.Panicf("error: %v", err)
	}
	if su != nil {
		log.Printf("User Groups: %v", su.GetUser().Groups)
	}
}
